import axios from 'axios'; // –Ü–º–ø–æ—Ä—Ç axios
import toast from 'react-hot-toast'; // –Ü–º–ø–æ—Ä—Ç react-hot-toast

// –Ü–º–ø–æ—Ä—Ç `createAsyncThunk` –∑ Redux Toolkit –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
import { createAsyncThunk } from '@reduxjs/toolkit';

// –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä 'axios' –∑ –±–∞–∑–æ–≤–∏–º URL –¥–ª—è API –∑–∞–ø–∏—Ç—ñ–≤
export const goitApi = axios.create({
  baseURL: 'https://connections-api.goit.global', // API-—Å–µ—Ä–≤–µ—Ä, –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º) —É –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç–∞—Ö
export const setAuthHeader = token => {
  goitApi.defaults.headers.common.Authorization = `Bearer ${token}`;
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø—Ä–∏ Log Out –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
export const clearAuthHeader = () => {
  goitApi.defaults.headers.common.Authorization = '';
};

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π thunk –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
// 'credentials' - –æ–±'—î–∫—Ç, —è–∫–∏–π –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —É registerThunk —Ç–∞ logInThunk –ø—ñ–¥ —á–∞—Å —Å–∞–±–º—ñ—Ç—É —Ñ–æ—Ä–º–∏
// –í—ñ–Ω –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω—ñ, —è–∫—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å —É —Ñ–æ—Ä–º—É –≤—Ö–æ–¥—É —á–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (—Ñ–∞–π–ª–∏ LoginForm i RegistrationForm)
export const registerThunk = createAsyncThunk(
  'auth/register', // –Ü–º'—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
  async (credentials, thunkAPI) => {
    try {
      // POST-–∑–∞–ø–∏—Ç –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const response = await goitApi.post('/users/signup', credentials);
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
      setAuthHeader(response.data.token);
      // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
      return response.data;
      // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏
    } catch (error) {
      // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ–¥ 11000 (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î), –≤–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      if (error.response && error.response.data.code === 11000) {
        toast.error('User already exist!'); // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –ø–æ–º–∏–ª–∫—É —É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—ñ
        return thunkAPI.rejectWithValue(error.message);
      }
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –≤ Redux
      return thunkAPI.rejectWithValue(error.message);
    }
  }
);

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π thunk –¥–ª—è –ª–æ–≥—ñ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const logInThunk = createAsyncThunk(
  'auth/login', // –Ü–º'—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
  async (credentials, thunkAPI) => {
    try {
      // POST-–∑–∞–ø–∏—Ç –Ω–∞ login
      const response = await goitApi.post('/users/login', credentials);
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
      setAuthHeader(response.data.token);
      // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
      return response.data;
      // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏
    } catch (error) {
      // –Ø–∫—â–æ –≤—Ö—ñ–¥ –Ω–µ—É—Å–ø—ñ—à–Ω–∏–π, –≤–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
      toast.error('Invalid e-mail or password!ü§∑‚Äç‚ôÇÔ∏è');
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –≤ Redux
      return thunkAPI.rejectWithValue(error.message);
    }
  }
);

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π thunk –¥–ª—è –≤–∏—Ö–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const logOutThunk = createAsyncThunk(
  'auth/logout', // –Ü–º'—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
  async (_, thunkAPI) => {
    try {
      // POST-–∑–∞–ø–∏—Ç –Ω–∞ –≤–∏—Ö—ñ–¥ —ñ–∑ —Å–∏—Å—Ç–µ–º–∏
      const response = await goitApi.post('/users/logout');
      // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–∏–π –≤–∏—Ö—ñ–¥
      toast.success('Thanks for using our appüôÇ See you soonüëã', {
        duration: 5000,
        // style: {
        //   width: '1000px',
        //   height: '100px',
        //   fontSize: '18px',
        //   padding: '15px',
        //   background: '#4caf50',
        //   color: 'white',
        //   borderRadius: '10px',
        // },
      });
      // –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —â–æ–± –∑–∞–ø–æ–±—ñ–≥—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
      clearAuthHeader();
      // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
      return response.data;
      // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏
    } catch (error) {
      return thunkAPI.rejectWithValue(error.message);
    }
  }
);

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π thunk –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const refreshUserThunk = createAsyncThunk(
  'auth/refresh', // –Ü–º'—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
  async (_, thunkAPI) => {
    // –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–æ–∫–µ–Ω –∑—ñ —Å—Ç–∞–Ω—É Redux
    const savedToken = thunkAPI.getState().auth.token;
    // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω—É –Ω–µ–º–∞—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
    if (savedToken === null) {
      return thunkAPI.rejectWithValue('Token is not exist');
    }
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    setAuthHeader(savedToken);
    try {
      // GET-–∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const response = await goitApi.get('/users/current');
      // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
      return response.data;
      // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏
    } catch (error) {
      return thunkAPI.rejectWithValue(error.message);
    }
  }
);
